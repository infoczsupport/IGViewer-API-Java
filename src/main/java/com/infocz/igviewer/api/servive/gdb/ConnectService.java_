package com.infocz.igviewer.api.servive.gdb;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.infocz.igviewer.api.common.Utils;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
@RequiredArgsConstructor
@MapperScan(value="com.infocz.igviewer.api.mapper.gdb", sqlSessionFactoryRef="sqlSessionFactoryDy")
public class ConnectService {
    @Value("${spring.datasource-gdb.mapper-locations}") String mybatisPath;
    @Value("${spring.datasource-gdb.mybatis-config}")   private String configPath;

    public static JdbcTemplate jdbcTemplate;

    @Autowired
    ApplicationContext applicationContext;

    public void createDs(Map<String, Object> params) throws Exception {
        DataSource dataSource = createDataSource(params);
        sqlSessionTemplateDy(
            sqlSessionFactoryDy(dataSource));
            jdbcTemplate = jdbcTemplateDy(dataSource);
    }    

    @Primary
    @Bean(name = "dataSourceDy")
    private DataSource createDataSource(Map<String, Object> params) throws SQLException {
        // String flavor = Utils.getString(params.get("flavor"));
		String user = Utils.getString(params.get("user"));
        String password = Utils.getString(params.get("password"));
        String url = "jdbc:agensgraph://" 
                + Utils.getString(params.get("host")) + ":"
                + Utils.getString(params.get("port")) + "/"
                + Utils.getString(params.get("database"));
        log.debug("url = {}", url);
        log.debug("user = {}", user);
        log.debug("password = {}", password);

        DataSource dataSource = DataSourceBuilder
            .create()
            .driverClassName("net.bitnine.agensgraph.Driver")
            .url(url)
            .username(user)
            .password(password)
            .build();
 
        try {
            Connection c = dataSource.getConnection();
            log.debug("getConnection ok = {}", c);
        } catch (Exception e) {
            log.debug("getConnection error ! = {}", e);
        }
        return dataSource;
    }    

    @Primary
    @Bean(name = "sqlSessionFactoryDy")
    private SqlSessionFactory sqlSessionFactoryDy( DataSource dataSource) throws Exception {
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
        sqlSessionFactoryBean.setDataSource(dataSource);
        sqlSessionFactoryBean.setMapperLocations(applicationContext.getResources(mybatisPath));
        Resource myBatisConfig = new PathMatchingResourcePatternResolver().getResource(configPath);
        sqlSessionFactoryBean.setConfigLocation(myBatisConfig);
        return sqlSessionFactoryBean.getObject();
    }

    private SqlSessionTemplate sqlSessionTemplateDy(SqlSessionFactory sqlSessionFactory) {
        return new SqlSessionTemplate(sqlSessionFactory);
    }

    // @Bean(name = "jdbcTemplateDy")
    public JdbcTemplate jdbcTemplateDy(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}

