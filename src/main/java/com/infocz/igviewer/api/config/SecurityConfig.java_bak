package com.cosmax.rcps.config.sec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.session.HttpSessionEventPublisher;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	@Autowired
	UserLoginSuccessHandler	userLoginSuccessHandler;

	@Autowired
	UserLoginFailHandler	userLoginFailHandler;

	@Override
	public void configure(WebSecurity web) {
		web.ignoring().antMatchers("/static/**");
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
    log.info("configure >>>>>>>>>>>>>>>>>");
		http.headers().frameOptions().sameOrigin();
		
		http.authorizeRequests()
				.antMatchers("/system/**").hasAuthority("A")
				.antMatchers("/common/**").authenticated()
				.antMatchers("/rcps/**").authenticated()
				.antMatchers("/login**").permitAll()
			.and()
				.exceptionHandling()
				.authenticationEntryPoint(new CustomAuthenticationEntryPoint("/login.do"))
				.accessDeniedPage("/error");

		http.formLogin()
				.loginPage("/login.do")
				.failureHandler(userLoginFailHandler)
				.successHandler(userLoginSuccessHandler)
				.permitAll();
		
		http.logout()
				.logoutRequestMatcher(new AntPathRequestMatcher("/logout.do"))
				.logoutSuccessUrl("/login.do")
				.invalidateHttpSession(true)
				.deleteCookies("JSESSIONID")
				.clearAuthentication(true)
			.and()
				.sessionManagement()
				.maximumSessions(1)
				.maxSessionsPreventsLogin(false)	/* false 기존 사용자 session 종료*/
				.expiredUrl("/duplicated_login");

		http.csrf().ignoringAntMatchers("/api/**").and().cors();
	}
  
	@Bean public ServletListenerRegistrationBean<HttpSessionEventPublisher> httpSessionEventPublisher() {
		return new ServletListenerRegistrationBean<HttpSessionEventPublisher>(new HttpSessionEventPublisher());
	}
	
	@Override
	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.authenticationProvider(authenticationProvider());
	}

	@Bean
	public AuthenticationProvider authenticationProvider() {
		return new CustomAuthenticationProvider();
	}
}