<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.infocz.igviewer.api.mapper.gdb.GdbMapper">

    <select id="selectGraphPaths" resultType="HashMap">
        /* DbMapper.selectGraphPaths */ 
        SELECT  graphname
             ,  nspid 
          FROM  ag_graph 
         order  by graphname
	</select>

    <update id="setGraphPath" parameterType="String">
        /* DbMapper.setGraphPath */ 
        SET graph_path = '${graph}'
	</update>

    <select id="selectLabels" parameterType="map" resultType="HashMap">
        /* DbMapper.selectLabels */ 
        SELECT labid
            ,  labname 
            ,  labdesc
            ,  labkind
            ,  start
            ,  "end"
         FROM  ag_map
        WHERE  graphname = #{graph}
        order  by labdesc
    </select>

    <select id="selectProperties" parameterType="map" resultType="HashMap">
        /* DbMapper.selectProperties */ 
        SELECT  labname as label
             ,  pname as prop 
             ,  labkind
          FROM  ag_properties	
         WHERE  graphname = #{graph}
         order  by label, prop
    </select>

    <select id="selectAgMap" parameterType="map" resultType="HashMap">
        /* DbMapper.selectAgMap */ 
        SELECT  labid as id
             ,  labname as label
             ,  labdesc as name
             ,  labkind
             ,  start
             ,  "end"
          FROM  ag_map	
         WHERE  graphname = #{graph}
    </select>

    <!-- <select id="selectEdgeList" parameterType="map" resultType="HashMap">
        /* DbMapper.selectEdgeList */ 
        SELECT  ta.e_label
             ,  ta.count
             ,  am.labdesc as title  
          FROM (SELECT  t.e_label
                     ,  count(1) 
                  FROM (match (n:${category})-[r]-(m) 
                 WHERE  id(n)=${keyword} RETURN label(r) AS e_label) t         
                 group  by t.e_label) ta
         inner  join ag_map am
            on  name(ta.e_label) = concat('"', am.labname, '"')
         WHERE  am.labkind = 'e'
         order  by ta.count desc 
    </select> -->

    <sql id="keywordIsOnly">
        SELECT DISTINCT ta.e_label, ta.count, am.labdesc as title  
        FROM(MATCH (n1) - [edge] - (n2) WHERE (id(n1)=${keyword}) RETURN label(edge) as e_label, COUNT(DISTINCT id(n2)) as count) ta
        INNER JOIN ag_map am
        ON name(ta.e_label) = concat('"', am.labname, '"')
        WHERE am.labkind = 'e'
        ORDER BY ta.count DESC
    </sql>

    <sql id="intersectMatch">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="INTERSECT">
            MATCH (n) - [r] - (m) WHERE id(n)='${keyword[index]}' AND label(n)='${category[index]}' RETURN DISTINCT(label(r)) AS e_label
        </foreach>
    </sql>

    <sql id="keywordForeachOrN1">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="OR">
            id(n1) = ${item}
        </foreach>
    </sql>

    <sql id="keywordForeachOrN2">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="OR">
            id(n2) = ${item}
        </foreach>
    </sql>

    <sql id="foreachFrom">
        <foreach item="item" index="index" collection="keyword" separator=",">
            (MATCH (b${index})-[ee${index}]-(nn${index}:${category[index]}) WHERE id(nn${index}) = ${keyword[index]} return * ) T${index} 
        </foreach>
    </sql>

    <sql id="foreachTableWhere">
        <foreach item="item" index="index" collection="keyword" separator="AND">
            <if test="index != 0">
                T${index - 1}.b${index - 1} = T${index}.b${index}
            </if>
        </foreach>
    </sql>

    <select id="selectEdgeList" parameterType="map" resultType="HashMap">
        /* DbMapper.selectEdgeList */
        <if test="keyword.getClass().getSimpleName().equals('String')
                    and category.getClass().getSimpleName().equals('String')">
            <include refid="keywordIsOnly"></include>
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'AND'
                    and showCnt == 'true'">
        SELECT DISTINCT ta.e_label, ca.count FROM (
			<include refid="intersectMatch"></include>
		) AS ta
        LEFT OUTER JOIN (
            MATCH (n1:${category[0]})-[edge]-(b)-[edge1]-(n2:${category[0]})
            WHERE
            <include refid="keywordForeachOrN1"></include>
            AND
            <include refid="keywordForeachOrN2"></include>
            AND id(b) IN (
                SELECT id(b0)
                FROM
                    <include refid="foreachFrom"></include>
                WHERE
                    <include refid="foreachTableWhere"></include>
            )
            RETURN label(edge) as e_label, COUNT(DISTINCT b)
        ) AS ca
		ON ta.e_label = ca.e_label
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'AND'
                    and showCnt != 'true'">
            <include refid="intersectMatch"></include>
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'OR'
                    and showCnt == 'true'">   
            MATCH (n1) - [edge] - (n2)
            WHERE
            <include refid="keywordForeachOrN1"></include>
            RETURN label(edge) as e_label, COUNT(DISTINCT id(n2)) as count ORDER BY count DESC
        </if>

    </select>

    <update id="callSpAgMap">
        /* DbMapper.ccallSpAgProperties */ 
        call sp_ag_map()
	</update>
    <update id="callSpAgProperties">
        /* DbMapper.callSpAgProperties */ 
        call sp_ag_properties()
	</update>
</mapper>