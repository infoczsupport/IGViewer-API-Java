<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.infocz.infoCruise.api.mapper.gdb.GdbMapper">

    <select id="selectGraphPaths" resultType="HashMap">
        /* GdbMapper.selectGraphPaths */ 
        SELECT  graphname
             ,  nspid 
          FROM  ag_graph 
         order  by graphname
	</select>

    <update id="setGraphPath" parameterType="String">
        /* GdbMapper.setGraphPath */ 
        SET graph_path = '${graph}'
	</update>

    <select id="selectLabels" parameterType="map" resultType="HashMap">
        /* GdbMapper.selectLabels */ 
        SELECT labid
            ,  labname 
            ,  labdesc
            ,  labkind
            ,  start
            ,  "end"
         FROM  ag_map
        WHERE  graphname = #{graph}
        order  by labdesc
    </select>

    <select id="selectProperties" parameterType="map" resultType="HashMap">
        /* GdbMapper.selectProperties */ 
        SELECT  labname as label
             ,  pname as prop 
             ,  labkind
          FROM  ag_properties	
         WHERE  graphname = #{graph}
         order  by label, prop
    </select>

    <select id="selectAgMap" parameterType="map" resultType="HashMap">
        /* GdbMapper.selectAgMap */ 
        SELECT  labid as id
             ,  labname as label
             ,  labdesc as name
             ,  labkind
             ,  start
             ,  "end"
          FROM  ag_map	
         WHERE  graphname = #{graph}
    </select>

    <!-- <select id="selectEdgeList" parameterType="map" resultType="HashMap">
        /* GdbMapper.selectEdgeList */ 
        SELECT  ta.e_label
             ,  ta.count
             ,  am.labdesc as title  
          FROM (SELECT  t.e_label
                     ,  count(1) 
                  FROM (match (n:${category})-[r]-(m) 
                 WHERE  id(n)=${keyword} RETURN label(r) AS e_label) t         
                 group  by t.e_label) ta
         inner  join ag_map am
            on  name(ta.e_label) = concat('"', am.labname, '"')
         WHERE  am.labkind = 'e'
         order  by ta.count desc 
    </select> -->

    <sql id="keywordIsOnly">
        SELECT DISTINCT ta.e_label, ta.count, am.labdesc as title  
        FROM(MATCH (n1) - [edge] - (n2) WHERE (id(n1)=${keyword}) RETURN label(edge) as e_label, COUNT(DISTINCT id(n2)) as count) ta
        INNER JOIN ag_map am
        ON name(ta.e_label) = concat('"', am.labname, '"')
        WHERE am.labkind = 'e'
        ORDER BY ta.count DESC
    </sql>

    <sql id="intersectMatch">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="INTERSECT">
            MATCH (n) - [r] - (m) WHERE id(n)='${keyword[index]}' AND label(n)='${category[index]}' RETURN DISTINCT(label(r)) AS e_label
        </foreach>
    </sql>

    <sql id="keywordForeachOrN1">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="OR">
            id(n1) = ${item}
        </foreach>
    </sql>

    <sql id="keywordForeachOrN2">
        <foreach item="item" index="index" collection="keyword" open="(" close=")" separator="OR">
            id(n2) = ${item}
        </foreach>
    </sql>

    <sql id="foreachFrom">
        <foreach item="item" index="index" collection="keyword" separator=",">
            (MATCH (b${index})-[ee${index}]-(nn${index}:${category[index]}) WHERE id(nn${index}) = ${keyword[index]} return * ) T${index} 
        </foreach>
    </sql>

    <sql id="foreachTableWhere">
        <foreach item="item" index="index" collection="keyword" separator="AND">
            <if test="index != 0">
                T${index - 1}.b${index - 1} = T${index}.b${index}
            </if>
        </foreach>
    </sql>

    <select id="selectEdgeList" parameterType="map" resultType="HashMap">
        /* GdbMapper.selectEdgeList */
        <if test="keyword.getClass().getSimpleName().equals('String')
                    and category.getClass().getSimpleName().equals('String')">
            <include refid="keywordIsOnly"></include>
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'AND'
                    and showCnt == 'true'">
        SELECT DISTINCT ta.e_label as e_label, COALESCE(ca.count, '0') as count FROM (
			<include refid="intersectMatch"></include>
		) AS ta
        LEFT OUTER JOIN (
            MATCH (n1:${category[0]})-[edge]-(b)-[edge1]-(n2:${category[0]})
            WHERE
            <include refid="keywordForeachOrN1"></include>
            AND
            <include refid="keywordForeachOrN2"></include>
            AND id(b) IN (
                SELECT id(b0)
                FROM
                    <include refid="foreachFrom"></include>
                WHERE
                    <include refid="foreachTableWhere"></include>
            )
            RETURN label(edge) as e_label, COUNT(DISTINCT b)
        ) AS ca
		ON ta.e_label = ca.e_label
        ORDER BY count DESC, e_label DESC
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'AND'
                    and showCnt != 'true'">
            <include refid="intersectMatch"></include>
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'OR'
                    and showCnt == 'true'">   
            MATCH (n1) - [edge] - (n2)
            WHERE
            <include refid="keywordForeachOrN1"></include>
            RETURN label(edge) as e_label, COUNT(DISTINCT id(n2)) as count ORDER BY count DESC
        </if>

        <if test="!keyword.getClass().getSimpleName().equals('String')
                    and !category.getClass().getSimpleName().equals('String')
                    and nodesLogic == 'OR'
                    and showCnt != 'true'">   
            MATCH (n1) - [edge] - (n2)
            WHERE
            <include refid="keywordForeachOrN1"></include>
            RETURN DISTINCT(label(edge)) as e_label ORDER BY e_label DESC
        </if>

    </select>

    <update id="callSpAgMap">
        /* GdbMapper.ccallSpAgProperties */ 
        call sp_ag_map()
	</update>
    <update id="callSpAgProperties">
        /* GdbMapper.callSpAgProperties */ 
        call sp_ag_properties()
	</update>

    <insert id="insertAgConvertMeta"  parameterType="map">
        /* GdbMapper.insertAgConvertMeta */ 
        INSERT  INTO public.ag_convert_meta(
                graph
	         ,  lab_kind
             ,  lab_nm)
	    VALUES (#{graph}
             ,  #{labKind}
             ,  #{labNm})
    </insert>
    <delete id="deleteAgConvertMeta" parameterType="map">
        /* GdbMapper.deleteMetaVertex */ 
        DELETE  FROM public.ag_convert_meta
	     WHERE  graph  = #{graph}
           AND  lab_nm = #{labNm}
	</delete>

    <select id="selectAgConvertMeta" parameterType="map" resultType="camelMap">
        /* GdbMapper.selectAgConvertMeta */ 
        SELECT  concat(ta.graphname, '.', ta.labname) as "key" 
             ,  ta.graphname as graph
             ,  ta.labkind as lab_kind
             ,  ta.labname as lab_nm
             ,  ta.graphid
             ,  ta.labid
             ,  ta.labdesc
			 ,  ta.start
			 ,  ta.end
             ,  case when tc.labname is null then ta.start else tc.labname end as start_nm
			 ,  case when td.labname is null then ta.end else td.labname end as end_nm
			 ,  td.labname
			 ,  case when tb.graph is null then true else false end as is_null
          FROM  public.ag_map ta
          left  join public.ag_convert_meta tb
            on  ta.graphname = tb.graph
           and  ta.labkind = tb.lab_kind
           and  ta.labname = tb.lab_nm
		  left  join public.ag_map tc 
		    on  ta.graphname = tc.graphname
		   and  tc.labkind = 'v'
		   and  cast( ta.start AS integer ) = tc.labid
		  left  join public.ag_map td 
		    on  ta.graphname = td.graphname
		   and  td.labkind = 'v'
		   and  cast( ta.end AS integer ) = td.labid
         WHERE  ta.graphname = #{graph}
		   and	ta.labkind = #{labKind}
    </select>

</mapper>

 <!-- CREATE TABLE IF NOT EXISTS public.ag_map(
            graphid oid,
            graphname name,
            labid integer,
            labname name,
            labdesc text COLLATE pg_catalog."default",
            labkind character(1) COLLATE pg_catalog."default",
            start character varying COLLATE pg_catalog."default",
            "end" character varying COLLATE pg_catalog."default"
        ) WITH (
            OIDS = FALSE
        )
        TABLESPACE pg_default;
        
        
        CREATE TABLE IF NOT EXISTS public.ag_properties(
            graphid oid,
            graphname name,
            labkind character(1) COLLATE pg_catalog."default",
            labid integer,
            labname name,
            pname text COLLATE pg_catalog."default",
            regdt timestamp with time zone DEFAULT now()
        ) WITH (
            OIDS = FALSE
        )
        TABLESPACE pg_default;
        
        CREATE INDEX IF NOT EXISTS ag_properties_idx1
            ON public.ag_properties USING btree
            (graphname ASC NULLS LAST, labname ASC NULLS LAST)
            TABLESPACE pg_default;    
        
        CREATE OR REPLACE PROCEDURE public.sp_ag_map(
            )
        LANGUAGE 'plpgsql'
        AS $BODY$        
            
        DECLARE         
            V_CURSOR CURSOR FOR
                SELECT graphid, graphname, labid, labname, labkind,
                        CASE WHEN obj_description(pc.oid) like 'base table for graph label%' 
                            THEN al.labname
                            ELSE obj_description(pc.oid)
                            END AS labdesc
                FROM   pg_catalog.ag_label al INNER JOIN pg_catalog.ag_graph ag on ag.oid = al.graphid
                inner join pg_catalog.pg_class pc on pc.relname = al.labname and pc.relnamespace = ag.nspid
                WHERE  al.labname not in ('ag_edge','ag_vertex');
                        
            V_RECORD  RECORD;
            V_VERTEX    TEXT;
            V_EDGE      TEXT;
            V_EDGELABEL TEXT;
            V_START     VARCHAR;
            V_END       VARCHAR;
        
        BEGIN		        
            TRUNCATE TABLE PUBLIC.AG_MAP;
        
            FOR V_RECORD IN V_CURSOR LOOP
            BEGIN        
                V_VERTEX = CONCAT(V_RECORD.GRAPHNAME ,'.ag_vertex');
                V_EDGE   = CONCAT(V_RECORD.GRAPHNAME ,'.ag_edge');
                V_EDGELABEL = CONCAT(V_RECORD.GRAPHNAME , '.', V_RECORD.LABNAME);
                V_START = NULL;
                V_END = NULL;
        
                IF V_RECORD.LABKIND = 'e' then
                execute 
                '   select  split_part(start::varchar,''.'', 1) as start, 
                            split_part("end"::varchar,''.'', 1) as end 
                    from ' || V_EDGELABEL  || ' 
                    limit 1
                '   into v_start, v_end ;    
        
                END IF;
        
                INSERT INTO PUBLIC.AG_MAP (
                                graphid, 
                                graphname, 
                                labid, 
                                labname, 
                                labdesc, 
                                labkind, 
                                start, 
                                "end")         
                    VALUES (    v_record.graphid,
                                v_record.graphname,
                                v_record.labid,
                                v_record.labname,
                                v_record.labdesc,
                                v_record.labkind,
                                v_start,
                                v_end );        
            END;
            END LOOP;
        END 
        $BODY$;
               
        
        CREATE OR REPLACE PROCEDURE public.sp_ag_properties(
            )
        LANGUAGE 'plpgsql'
        AS $BODY$        
            
        DECLARE         
            V_CURSOR CURSOR FOR
                SELECT OID, GRAPHNAME
                FROM   PG_CATALOG.AG_GRAPH;
                        
            V_RECORD  RECORD;
            V_VERTEX  TEXT;
            V_EDGE    TEXT;
        
        BEGIN		        
            TRUNCATE TABLE PUBLIC.AG_PROPERTIES;
        
            FOR V_RECORD IN V_CURSOR LOOP
            BEGIN        
                V_VERTEX = CONCAT(V_RECORD.GRAPHNAME ,'.ag_vertex');
                V_EDGE   = CONCAT(V_RECORD.GRAPHNAME ,'.ag_edge');
        
                EXECUTE 
                '   INSERT INTO PUBLIC.AG_PROPERTIES (
                                GRAPHID,
                                GRAPHNAME,
                                LABID,
                                LABNAME,
                                LABKIND,
                                PNAME ) 
                        SELECT distinct l.graphid, g.graphname, l.labid, l.labname, l.labkind, jsonb_object_keys(v.properties) 
                        FROM   PG_CATALOG.AG_LABEL l INNER JOIN PG_CATALOG.AG_GRAPH g ON g.oid = l.graphid, ' || V_VERTEX  || '  v 
                        WHERE  l.labname not in (''ag_vertex'', ''ag_edge'') 
                        AND    g.graphname ='''|| V_RECORD.GRAPHNAME  || ''' 
                        AND    l.labid = cast(split_part(v.id::varchar,''.'', 1) as integer) 
                    UNION ALL 
                        SELECT distinct l.graphid, g.graphname, l.labid, l.labname, l.labkind, jsonb_object_keys(v.properties) 
                        FROM   PG_CATALOG.AG_LABEL l INNER JOIN PG_CATALOG.AG_GRAPH g ON g.oid = l.graphid, ' || V_EDGE  || '  v 
                        WHERE  l.labname not in (''ag_vertex'', ''ag_edge'') 
                        AND    g.graphname ='''|| V_RECORD.GRAPHNAME  || ''' 
                        AND    l.labid = cast(split_part(v.id::varchar,''.'', 1) as integer) 
                ';			
            
            END;
            END LOOP;
        END 
        $BODY$;
        
        call sp_ag_map();
        
        call sp_ag_properties();     -->